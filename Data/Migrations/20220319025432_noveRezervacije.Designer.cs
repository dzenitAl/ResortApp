// <auto-generated />
using System;
using Data.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Data.Migrations
{
    [DbContext(typeof(MojDbContext))]
    [Migration("20220319025432_noveRezervacije")]
    partial class noveRezervacije
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Data.EFModels.Admin", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("RolaID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("RolaID");

                    b.ToTable("Admin");
                });

            modelBuilder.Entity("Data.EFModels.Bazen", b =>
                {
                    b.Property<int>("BazenID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("Cijena")
                        .HasColumnType("real");

                    b.Property<string>("NazivBazena")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PutanjaDoSlikeSale")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BazenID");

                    b.ToTable("Bazen");
                });

            modelBuilder.Entity("Data.EFModels.Bungalov", b =>
                {
                    b.Property<int>("BungalovId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrojBungalova")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BungalovTipID")
                        .HasColumnType("int");

                    b.Property<float>("Cijena")
                        .HasColumnType("real");

                    b.Property<string>("NazivBungalova")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OpisBungalova")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BungalovId");

                    b.HasIndex("BungalovTipID");

                    b.ToTable("Bungalov");
                });

            modelBuilder.Entity("Data.EFModels.BungalovSlike", b =>
                {
                    b.Property<int>("BungalovSlikeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BungalovId")
                        .HasColumnType("int");

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("URL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BungalovSlikeId");

                    b.HasIndex("BungalovId");

                    b.ToTable("BungalovSlike");
                });

            modelBuilder.Entity("Data.EFModels.BungalovTip", b =>
                {
                    b.Property<int>("BungalovTipID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NazivTipaBungalova")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BungalovTipID");

                    b.ToTable("BungalovTip");
                });

            modelBuilder.Entity("Data.EFModels.Klijent", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("RolaID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("RolaID");

                    b.ToTable("Klijent");
                });

            modelBuilder.Entity("Data.EFModels.Korisnik", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Ime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Prezime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RolaID")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("RolaID");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Data.EFModels.KreditnaKartica", b =>
                {
                    b.Property<int>("KreditnaKarticaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrojKreditneKartice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CVC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GodinaIstekaKartice")
                        .HasColumnType("int");

                    b.Property<string>("KorisnikID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("MjesecIstekaKartice")
                        .HasColumnType("int");

                    b.HasKey("KreditnaKarticaID");

                    b.HasIndex("KorisnikID");

                    b.ToTable("KreditnaKartica");
                });

            modelBuilder.Entity("Data.EFModels.MeniRestoran", b =>
                {
                    b.Property<int>("MeniRestoranID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("CijenaMenija")
                        .HasColumnType("real");

                    b.Property<int>("MeniRestoranTipID")
                        .HasColumnType("int");

                    b.Property<string>("OpisMenija")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Restoran")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MeniRestoranID");

                    b.HasIndex("MeniRestoranTipID");

                    b.ToTable("MeniRestoran");
                });

            modelBuilder.Entity("Data.EFModels.MeniRestoranSlike", b =>
                {
                    b.Property<int>("MeniRestoranSlikeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MeniRestoranID")
                        .HasColumnType("int");

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("URL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MeniRestoranSlikeID");

                    b.HasIndex("MeniRestoranID");

                    b.ToTable("MeniRestoranSlike");
                });

            modelBuilder.Entity("Data.EFModels.MeniRestoranTip", b =>
                {
                    b.Property<int>("MeniRestoranTipID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NazivTipaMenija")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MeniRestoranTipID");

                    b.ToTable("MeniRestoranTip");
                });

            modelBuilder.Entity("Data.EFModels.NacinPlacanja", b =>
                {
                    b.Property<int>("NacinPlacanjaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NacinPlacanjaNaziv")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NacinPlacanjaID");

                    b.ToTable("NacinPlacanja");
                });

            modelBuilder.Entity("Data.EFModels.Racun", b =>
                {
                    b.Property<int>("RacunID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("IznosRacuna")
                        .HasColumnType("real");

                    b.Property<int?>("KreditnaKarticaID")
                        .HasColumnType("int");

                    b.HasKey("RacunID");

                    b.HasIndex("KreditnaKarticaID");

                    b.ToTable("Racun");
                });

            modelBuilder.Entity("Data.EFModels.Rezervacija", b =>
                {
                    b.Property<int>("RezervacijaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DatumRezervacije")
                        .HasColumnType("datetime2");

                    b.Property<string>("KorisnikID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("NacinPlacanjaID")
                        .HasColumnType("int");

                    b.Property<int?>("RacunID")
                        .HasColumnType("int");

                    b.Property<int?>("StatusRezervacijeID")
                        .HasColumnType("int");

                    b.HasKey("RezervacijaID");

                    b.HasIndex("KorisnikID");

                    b.HasIndex("NacinPlacanjaID");

                    b.HasIndex("RacunID");

                    b.HasIndex("StatusRezervacijeID");

                    b.ToTable("Rezervacija");
                });

            modelBuilder.Entity("Data.EFModels.RezervacijaMeniRestoran", b =>
                {
                    b.Property<int>("MeniRestoranID")
                        .HasColumnType("int");

                    b.Property<int>("RezervacijaID")
                        .HasColumnType("int");

                    b.Property<int>("BrojTretmana")
                        .HasColumnType("int");

                    b.Property<float>("CijenaTretmana")
                        .HasColumnType("real");

                    b.Property<DateTime>("TerminRezervacije")
                        .HasColumnType("datetime2");

                    b.Property<float>("UkupnaCijena")
                        .HasColumnType("real");

                    b.HasKey("MeniRestoranID", "RezervacijaID");

                    b.HasIndex("RezervacijaID");

                    b.ToTable("RezervacijaMeniRestoran");
                });

            modelBuilder.Entity("Data.EFModels.RezervacijaSoba", b =>
                {
                    b.Property<int>("SobaID")
                        .HasColumnType("int");

                    b.Property<int>("RezervacijaID")
                        .HasColumnType("int");

                    b.Property<int>("BrojNoci")
                        .HasColumnType("int");

                    b.Property<float>("Cijena")
                        .HasColumnType("real");

                    b.Property<DateTime>("DatumRezervacije")
                        .HasColumnType("datetime2");

                    b.Property<float>("UkupnaCijena")
                        .HasColumnType("real");

                    b.HasKey("SobaID", "RezervacijaID");

                    b.HasIndex("RezervacijaID");

                    b.ToTable("RezervacijaSoba");
                });

            modelBuilder.Entity("Data.EFModels.RezervacijaSportskaAktivnost", b =>
                {
                    b.Property<int>("SportskaAktivnostID")
                        .HasColumnType("int");

                    b.Property<int>("RezervacijaID")
                        .HasColumnType("int");

                    b.Property<int>("BrojTermina")
                        .HasColumnType("int");

                    b.Property<float>("CijenaTermina")
                        .HasColumnType("real");

                    b.Property<DateTime>("TerminRezervacije")
                        .HasColumnType("datetime2");

                    b.Property<float>("UkupnaCijena")
                        .HasColumnType("real");

                    b.HasKey("SportskaAktivnostID", "RezervacijaID");

                    b.HasIndex("RezervacijaID");

                    b.ToTable("RezervacijaSportskaAktivnost");
                });

            modelBuilder.Entity("Data.EFModels.RezervacijaWellnes", b =>
                {
                    b.Property<int>("WellnesID")
                        .HasColumnType("int");

                    b.Property<int>("RezervacijaID")
                        .HasColumnType("int");

                    b.Property<int>("BrojTretmana")
                        .HasColumnType("int");

                    b.Property<float>("CijenaTretmana")
                        .HasColumnType("real");

                    b.Property<DateTime>("TerminRezervacije")
                        .HasColumnType("datetime2");

                    b.Property<float>("UkupnaCijena")
                        .HasColumnType("real");

                    b.HasKey("WellnesID", "RezervacijaID");

                    b.HasIndex("RezervacijaID");

                    b.ToTable("RezervacijaWellnes");
                });

            modelBuilder.Entity("Data.EFModels.Rola", b =>
                {
                    b.Property<int>("RolaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NazivRole")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RolaID");

                    b.ToTable("Rola");
                });

            modelBuilder.Entity("Data.EFModels.Sala", b =>
                {
                    b.Property<int>("SalaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("CijenaIznajmljivanjaSale")
                        .HasColumnType("real");

                    b.Property<int>("KapacitetSale")
                        .HasColumnType("int");

                    b.Property<string>("NazivSale")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OpisSale")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PutanjaDoSlikeSale")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SalaTipID")
                        .HasColumnType("int");

                    b.HasKey("SalaID");

                    b.HasIndex("SalaTipID");

                    b.ToTable("Sala");
                });

            modelBuilder.Entity("Data.EFModels.SalaTip", b =>
                {
                    b.Property<int>("SalaTipID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NazivTipaSale")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SalaTipID");

                    b.ToTable("SalaTip");
                });

            modelBuilder.Entity("Data.EFModels.Soba", b =>
                {
                    b.Property<int>("SobaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrojSobe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Cijena")
                        .HasColumnType("real");

                    b.Property<string>("NazivSobe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OpisSobe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SobaTipID")
                        .HasColumnType("int");

                    b.HasKey("SobaId");

                    b.HasIndex("SobaTipID");

                    b.ToTable("Soba");
                });

            modelBuilder.Entity("Data.EFModels.SobaSlike", b =>
                {
                    b.Property<int>("SobaSlikeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SobaId")
                        .HasColumnType("int");

                    b.Property<string>("URL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SobaSlikeId");

                    b.HasIndex("SobaId");

                    b.ToTable("SobaSlike");
                });

            modelBuilder.Entity("Data.EFModels.SobaTip", b =>
                {
                    b.Property<int>("SobaTipID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NazivTipaSobe")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SobaTipID");

                    b.ToTable("SobaTip");
                });

            modelBuilder.Entity("Data.EFModels.SpaCentar", b =>
                {
                    b.Property<int>("SpaCentarID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CijenaZakupa")
                        .HasColumnType("int");

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PutanjaDoSlike")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SpaCentarID");

                    b.ToTable("SpaCentar");
                });

            modelBuilder.Entity("Data.EFModels.SportskaAktivnost", b =>
                {
                    b.Property<int>("SportskaAktivnostID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CijenaAktivnosti")
                        .HasColumnType("int");

                    b.Property<string>("NazivAktivnosti")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OpisPrograma")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SportskaAktivnostTipID")
                        .HasColumnType("int");

                    b.Property<int>("SportskeAktivnostiTipID")
                        .HasColumnType("int");

                    b.HasKey("SportskaAktivnostID");

                    b.HasIndex("SportskaAktivnostTipID");

                    b.ToTable("SportskaAktivnost");
                });

            modelBuilder.Entity("Data.EFModels.SportskaAktivnostSlike", b =>
                {
                    b.Property<int>("SportskaAktivnostSlikeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SportskaAktivnostID")
                        .HasColumnType("int");

                    b.Property<string>("URL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SportskaAktivnostSlikeId");

                    b.HasIndex("SportskaAktivnostID");

                    b.ToTable("SportskaAktivnostSlike");
                });

            modelBuilder.Entity("Data.EFModels.SportskaAktivnostTip", b =>
                {
                    b.Property<int>("SportskaAktivnostTipID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NazivTipaAktivnosti")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SportskaAktivnostTipID");

                    b.ToTable("SportskaAktivnostTip");
                });

            modelBuilder.Entity("Data.EFModels.StatusRezervacije", b =>
                {
                    b.Property<int>("StatusRezervacijeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StatusRezervacijeID");

                    b.ToTable("StatusRezervacije");
                });

            modelBuilder.Entity("Data.EFModels.Wellnes", b =>
                {
                    b.Property<int>("WellnesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("CijenaTretmana")
                        .HasColumnType("real");

                    b.Property<DateTime>("DatumVrijeme")
                        .HasColumnType("datetime2");

                    b.Property<string>("NazivWellnes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OpisPrograma")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PutanjaDoSlikeWellnes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipWellnes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VremenskoTrajanjeTermina")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WellnesId");

                    b.ToTable("Wellnes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Data.EFModels.Admin", b =>
                {
                    b.HasOne("Data.EFModels.Korisnik", "Korisnik")
                        .WithOne("Admin")
                        .HasForeignKey("Data.EFModels.Admin", "ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.EFModels.Rola", "Rola")
                        .WithMany()
                        .HasForeignKey("RolaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.EFModels.Bungalov", b =>
                {
                    b.HasOne("Data.EFModels.BungalovTip", "BungalovTip")
                        .WithMany()
                        .HasForeignKey("BungalovTipID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.EFModels.BungalovSlike", b =>
                {
                    b.HasOne("Data.EFModels.Bungalov", "Bungalov")
                        .WithMany()
                        .HasForeignKey("BungalovId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.EFModels.Klijent", b =>
                {
                    b.HasOne("Data.EFModels.Korisnik", "Korisnik")
                        .WithOne("Klijent")
                        .HasForeignKey("Data.EFModels.Klijent", "ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.EFModels.Rola", "Rola")
                        .WithMany()
                        .HasForeignKey("RolaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.EFModels.Korisnik", b =>
                {
                    b.HasOne("Data.EFModels.Rola", "Rola")
                        .WithMany()
                        .HasForeignKey("RolaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.EFModels.KreditnaKartica", b =>
                {
                    b.HasOne("Data.EFModels.Korisnik", "Korisnik")
                        .WithMany()
                        .HasForeignKey("KorisnikID");
                });

            modelBuilder.Entity("Data.EFModels.MeniRestoran", b =>
                {
                    b.HasOne("Data.EFModels.MeniRestoranTip", "MeniRestoranTip")
                        .WithMany()
                        .HasForeignKey("MeniRestoranTipID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.EFModels.MeniRestoranSlike", b =>
                {
                    b.HasOne("Data.EFModels.MeniRestoran", "MeniRestoran")
                        .WithMany()
                        .HasForeignKey("MeniRestoranID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.EFModels.Racun", b =>
                {
                    b.HasOne("Data.EFModels.KreditnaKartica", "KreditnaKartica")
                        .WithMany()
                        .HasForeignKey("KreditnaKarticaID");
                });

            modelBuilder.Entity("Data.EFModels.Rezervacija", b =>
                {
                    b.HasOne("Data.EFModels.Korisnik", "Korisnik")
                        .WithMany()
                        .HasForeignKey("KorisnikID");

                    b.HasOne("Data.EFModels.NacinPlacanja", "NacinPlacanja")
                        .WithMany()
                        .HasForeignKey("NacinPlacanjaID");

                    b.HasOne("Data.EFModels.Racun", "Racun")
                        .WithMany()
                        .HasForeignKey("RacunID");

                    b.HasOne("Data.EFModels.StatusRezervacije", "StatusRezervacije")
                        .WithMany()
                        .HasForeignKey("StatusRezervacijeID");
                });

            modelBuilder.Entity("Data.EFModels.RezervacijaMeniRestoran", b =>
                {
                    b.HasOne("Data.EFModels.MeniRestoran", "MeniRestoran")
                        .WithMany()
                        .HasForeignKey("MeniRestoranID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.EFModels.Rezervacija", "Rezervacija")
                        .WithMany()
                        .HasForeignKey("RezervacijaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.EFModels.RezervacijaSoba", b =>
                {
                    b.HasOne("Data.EFModels.Rezervacija", "Rezervacija")
                        .WithMany()
                        .HasForeignKey("RezervacijaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.EFModels.Soba", "Soba")
                        .WithMany()
                        .HasForeignKey("SobaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.EFModels.RezervacijaSportskaAktivnost", b =>
                {
                    b.HasOne("Data.EFModels.Rezervacija", "Rezervacija")
                        .WithMany()
                        .HasForeignKey("RezervacijaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.EFModels.SportskaAktivnost", "SportskaAktivnost")
                        .WithMany()
                        .HasForeignKey("SportskaAktivnostID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.EFModels.RezervacijaWellnes", b =>
                {
                    b.HasOne("Data.EFModels.Rezervacija", "Rezervacija")
                        .WithMany()
                        .HasForeignKey("RezervacijaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.EFModels.Wellnes", "Wellnes")
                        .WithMany()
                        .HasForeignKey("WellnesID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.EFModels.Sala", b =>
                {
                    b.HasOne("Data.EFModels.SalaTip", "SalaTip")
                        .WithMany()
                        .HasForeignKey("SalaTipID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.EFModels.Soba", b =>
                {
                    b.HasOne("Data.EFModels.SobaTip", "SobaTip")
                        .WithMany()
                        .HasForeignKey("SobaTipID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.EFModels.SobaSlike", b =>
                {
                    b.HasOne("Data.EFModels.Soba", "Soba")
                        .WithMany()
                        .HasForeignKey("SobaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.EFModels.SportskaAktivnost", b =>
                {
                    b.HasOne("Data.EFModels.SportskaAktivnostTip", "SportskaAktivnostTip")
                        .WithMany()
                        .HasForeignKey("SportskaAktivnostTipID");
                });

            modelBuilder.Entity("Data.EFModels.SportskaAktivnostSlike", b =>
                {
                    b.HasOne("Data.EFModels.SportskaAktivnost", "SportskaAktivnost")
                        .WithMany()
                        .HasForeignKey("SportskaAktivnostID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Data.EFModels.Korisnik", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Data.EFModels.Korisnik", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.EFModels.Korisnik", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Data.EFModels.Korisnik", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
